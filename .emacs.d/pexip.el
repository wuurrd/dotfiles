(setq build-prefix "")

(if (eq system-type 'darwin)
    (setq build-prefix "export GOPATH=/Users/david/src/go && ")
)

(defhydra pexip-build-menu (:hint nil)
  "Launch"
  ("a" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./agent/test.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "agent")
  ("b" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./backend/test.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "backend")
  ("c" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "go test ./lib/cloudtrail ./sinks/cloudtrail")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "cloudtrail")
  ("e" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./ci/errcheck.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "errcheck")
  ("g" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./ci/golint.sh && ./ci/errcheck.sh && ./ci/govet.sh && ./ci/gofmt.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "lint" :color teal)
  ("k" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./ci/license-check.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "license-check")
  ("s" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "go test ./stasher")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "stasher")
  ("p" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "cd ./lib/circuit/api/proto && go generate")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "protobuf" :color amaranth)
  ("l" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "cd ./frontend && npm run lint")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "frontend-lint")
  ("f" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "cd ./frontend && npm run test")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "frontend" :color pink)
  ("t" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "./ci/govet.sh")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "govet")
  ("v" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "go test -v ./apiv1")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "apiv1")
  ("u" (lambda ()
         (interactive)
         (puthash (projectile-project-root)
                  (concat build-prefix "go test ./backend ./apiv1 ./stasher ./lib/... ./seldon/... ./sinks/...")
                  projectile-test-cmd-map)
         (call-interactively 'projectile-test-project)) "unittests" :color blue)
  ("q" hydra-keyboard-quit "quit"))

(global-set-key (kbd "M-=") 'pexip-build-menu/body)
